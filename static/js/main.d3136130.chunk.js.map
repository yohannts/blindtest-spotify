{"version":3,"sources":["logo.svg","loading.svg","Button.js","App.js","registerServiceWorker.js","index.js"],"names":["Button","props","onClick","children","getRandomNumber","x","Math","floor","random","App","useState","songsLoaded","setSongsLoaded","tracks","setTracks","currentTrack","setCurrentTrack","timeoutId","setTimeoutId","React","useEffect","fetch","method","headers","Authorization","then","response","json","data","console","log","items","trackIndex","length","track","setTimeout","getNewTrack","track1","randomIndex","AlbumCover","src","album","images","url","style","width","height","className","loading","alt","index1","index2","track0","tableTracks","array","counter","index","temp","shuffleArray","logo","name","preview_url","playStatus","Sound","status","PLAYING","map","Id1","id","Id2","clearTimeout","swal","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d3136130.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.cb0ec48d.svg\";","export default __webpack_public_path__ + \"static/media/loading.6e6379f4.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\nimport { useState } from 'react';\n\nconst apiToken = 'BQDvNv0m2Xy7bS6NvmPhe06z0Xs2z4ntN59tbDqDw0NJaBWDOGYjJlYabGRoHMeAcyHdEVMPkxImq7l75GL-Jxzv_VxTAbBIpLVYbWh_kH54HZTP3rDgJg_lLK4LV91gyiMmT7_tmYeGOCpeenbE-Ro_U2d5QJa3pDGKZPgWcoXBvRRa';\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n}\n\nconst App = () => {\n  \n  const [songsLoaded, setSongsLoaded] = useState(false);\n  const [tracks, setTracks] = useState();\n  const [currentTrack, setCurrentTrack] = useState()\n  const [timeoutId, setTimeoutId] = useState();\n\n  React.useEffect(() => \n  fetch('https://api.spotify.com/v1/me/tracks', {\n    method: 'GET',\n    headers: {\n     Authorization: 'Bearer ' + apiToken,\n    },\n  })\n    .then(response => response.json())\n    .then((data) => {\n      console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\n      setTracks(data.items);\n      const trackIndex = getRandomNumber(data.items.length);\n      setCurrentTrack(data.items[trackIndex].track);\n      setSongsLoaded(true);\n    }), []);\n\n  React.useEffect(() => {\n    setTimeoutId(setTimeout(() => getNewTrack(), 30000));\n  }, [track1]);\n\n  function checkAnswer(Id1, Id2) {\n    if (Id1 === Id2) {\n      clearTimeout(timeoutId);\n      swal('Bravo', 'Bien Joué a toi', 'success').then(() => getNewTrack());\n    } else {\n      swal('Pas de Pot', 'Perdu', 'error');\n    }\n  }\n\n  const getNewTrack = () => {\n    if (!tracks) {\n      return;\n    }\n    const randomIndex = getRandomNumber(tracks.length);\n    setCurrentTrack(tracks[randomIndex].track);\n  };\n  \n  const AlbumCover = ({ track }) =>  {\n    const src = track.album.images[0].url;\n    return (\n        <img src={src} style={{ width: 400, height: 400 }} />\n    );\n  }\n\n  if (!songsLoaded) {\n    return (\n      <div className=\"App\">\n        <img src={loading} className=\"App-logo\" alt=\"logo\"/>\n      </div>\n    );\n  }\n\n  const index1 = getRandomNumber(tracks.length);\n  const index2 = getRandomNumber(tracks.length);\n\n  const track0 = currentTrack;\n  const track1 = tracks[index1].track;\n  const track2 = tracks[index2].track;\n\n  const tableTrack = [track0, track1, track2];\n  const tableTracks = shuffleArray(tableTrack);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n      </header>\n      <div className=\"App-images\">\n        <AlbumCover track={track0} />\n        <p>Voici le Giga BlindTest avec DJ Nemen/Kristof, on a {tracks.length} tracks de plaisir pour vous !<br/>La première est {track0.name} </p>\n        <Sound url={ track0.preview_url } playStatus={Sound.status.PLAYING}/>\n      </div>\n      \n\n      <div className=\"App-buttons\">\n      {tableTracks.map( track =>(\n        <Button onClick={() => checkAnswer(currentTrack.id, track.id)}>{track.name}</Button>\n      ) ) }\n\n      </div>\n    </div>\n  );\n};\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}